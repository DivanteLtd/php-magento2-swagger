<?php
/**
 * CustomerDataAttributeMetadataInterface
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Magento2Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Magento Enterprise
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Magento2Client\Model;

use \ArrayAccess;

/**
 * CustomerDataAttributeMetadataInterface Class Doc Comment
 *
 * @category    Class
 * @description Customer attribute metadata interface.
 * @package     Swagger\Magento2Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CustomerDataAttributeMetadataInterface implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'customer-data-attribute-metadata-interface';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'frontend_input' => 'string',
        'input_filter' => 'string',
        'store_label' => 'string',
        'validation_rules' => '\Swagger\Magento2Client\Model\CustomerDataValidationRuleInterface[]',
        'multiline_count' => 'int',
        'visible' => 'bool',
        'required' => 'bool',
        'data_model' => 'string',
        'options' => '\Swagger\Magento2Client\Model\CustomerDataOptionInterface[]',
        'frontend_class' => 'string',
        'user_defined' => 'bool',
        'sort_order' => 'int',
        'frontend_label' => 'string',
        'note' => 'string',
        'system' => 'bool',
        'backend_type' => 'string',
        'is_used_in_grid' => 'bool',
        'is_visible_in_grid' => 'bool',
        'is_filterable_in_grid' => 'bool',
        'is_searchable_in_grid' => 'bool',
        'attribute_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'frontend_input' => null,
        'input_filter' => null,
        'store_label' => null,
        'validation_rules' => null,
        'multiline_count' => null,
        'visible' => null,
        'required' => null,
        'data_model' => null,
        'options' => null,
        'frontend_class' => null,
        'user_defined' => null,
        'sort_order' => null,
        'frontend_label' => null,
        'note' => null,
        'system' => null,
        'backend_type' => null,
        'is_used_in_grid' => null,
        'is_visible_in_grid' => null,
        'is_filterable_in_grid' => null,
        'is_searchable_in_grid' => null,
        'attribute_code' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'frontend_input' => 'frontendInput',
        'input_filter' => 'inputFilter',
        'store_label' => 'storeLabel',
        'validation_rules' => 'validationRules',
        'multiline_count' => 'multilineCount',
        'visible' => 'visible',
        'required' => 'required',
        'data_model' => 'dataModel',
        'options' => 'options',
        'frontend_class' => 'frontendClass',
        'user_defined' => 'userDefined',
        'sort_order' => 'sortOrder',
        'frontend_label' => 'frontendLabel',
        'note' => 'note',
        'system' => 'system',
        'backend_type' => 'backendType',
        'is_used_in_grid' => 'isUsedInGrid',
        'is_visible_in_grid' => 'isVisibleInGrid',
        'is_filterable_in_grid' => 'isFilterableInGrid',
        'is_searchable_in_grid' => 'isSearchableInGrid',
        'attribute_code' => 'attributeCode'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'frontend_input' => 'setFrontendInput',
        'input_filter' => 'setInputFilter',
        'store_label' => 'setStoreLabel',
        'validation_rules' => 'setValidationRules',
        'multiline_count' => 'setMultilineCount',
        'visible' => 'setVisible',
        'required' => 'setRequired',
        'data_model' => 'setDataModel',
        'options' => 'setOptions',
        'frontend_class' => 'setFrontendClass',
        'user_defined' => 'setUserDefined',
        'sort_order' => 'setSortOrder',
        'frontend_label' => 'setFrontendLabel',
        'note' => 'setNote',
        'system' => 'setSystem',
        'backend_type' => 'setBackendType',
        'is_used_in_grid' => 'setIsUsedInGrid',
        'is_visible_in_grid' => 'setIsVisibleInGrid',
        'is_filterable_in_grid' => 'setIsFilterableInGrid',
        'is_searchable_in_grid' => 'setIsSearchableInGrid',
        'attribute_code' => 'setAttributeCode'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'frontend_input' => 'getFrontendInput',
        'input_filter' => 'getInputFilter',
        'store_label' => 'getStoreLabel',
        'validation_rules' => 'getValidationRules',
        'multiline_count' => 'getMultilineCount',
        'visible' => 'getVisible',
        'required' => 'getRequired',
        'data_model' => 'getDataModel',
        'options' => 'getOptions',
        'frontend_class' => 'getFrontendClass',
        'user_defined' => 'getUserDefined',
        'sort_order' => 'getSortOrder',
        'frontend_label' => 'getFrontendLabel',
        'note' => 'getNote',
        'system' => 'getSystem',
        'backend_type' => 'getBackendType',
        'is_used_in_grid' => 'getIsUsedInGrid',
        'is_visible_in_grid' => 'getIsVisibleInGrid',
        'is_filterable_in_grid' => 'getIsFilterableInGrid',
        'is_searchable_in_grid' => 'getIsSearchableInGrid',
        'attribute_code' => 'getAttributeCode'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['frontend_input'] = isset($data['frontend_input']) ? $data['frontend_input'] : null;
        $this->container['input_filter'] = isset($data['input_filter']) ? $data['input_filter'] : null;
        $this->container['store_label'] = isset($data['store_label']) ? $data['store_label'] : null;
        $this->container['validation_rules'] = isset($data['validation_rules']) ? $data['validation_rules'] : null;
        $this->container['multiline_count'] = isset($data['multiline_count']) ? $data['multiline_count'] : null;
        $this->container['visible'] = isset($data['visible']) ? $data['visible'] : null;
        $this->container['required'] = isset($data['required']) ? $data['required'] : null;
        $this->container['data_model'] = isset($data['data_model']) ? $data['data_model'] : null;
        $this->container['options'] = isset($data['options']) ? $data['options'] : null;
        $this->container['frontend_class'] = isset($data['frontend_class']) ? $data['frontend_class'] : null;
        $this->container['user_defined'] = isset($data['user_defined']) ? $data['user_defined'] : null;
        $this->container['sort_order'] = isset($data['sort_order']) ? $data['sort_order'] : null;
        $this->container['frontend_label'] = isset($data['frontend_label']) ? $data['frontend_label'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['system'] = isset($data['system']) ? $data['system'] : null;
        $this->container['backend_type'] = isset($data['backend_type']) ? $data['backend_type'] : null;
        $this->container['is_used_in_grid'] = isset($data['is_used_in_grid']) ? $data['is_used_in_grid'] : null;
        $this->container['is_visible_in_grid'] = isset($data['is_visible_in_grid']) ? $data['is_visible_in_grid'] : null;
        $this->container['is_filterable_in_grid'] = isset($data['is_filterable_in_grid']) ? $data['is_filterable_in_grid'] : null;
        $this->container['is_searchable_in_grid'] = isset($data['is_searchable_in_grid']) ? $data['is_searchable_in_grid'] : null;
        $this->container['attribute_code'] = isset($data['attribute_code']) ? $data['attribute_code'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['frontend_input'] === null) {
            $invalid_properties[] = "'frontend_input' can't be null";
        }
        if ($this->container['input_filter'] === null) {
            $invalid_properties[] = "'input_filter' can't be null";
        }
        if ($this->container['store_label'] === null) {
            $invalid_properties[] = "'store_label' can't be null";
        }
        if ($this->container['validation_rules'] === null) {
            $invalid_properties[] = "'validation_rules' can't be null";
        }
        if ($this->container['multiline_count'] === null) {
            $invalid_properties[] = "'multiline_count' can't be null";
        }
        if ($this->container['visible'] === null) {
            $invalid_properties[] = "'visible' can't be null";
        }
        if ($this->container['required'] === null) {
            $invalid_properties[] = "'required' can't be null";
        }
        if ($this->container['data_model'] === null) {
            $invalid_properties[] = "'data_model' can't be null";
        }
        if ($this->container['options'] === null) {
            $invalid_properties[] = "'options' can't be null";
        }
        if ($this->container['frontend_class'] === null) {
            $invalid_properties[] = "'frontend_class' can't be null";
        }
        if ($this->container['user_defined'] === null) {
            $invalid_properties[] = "'user_defined' can't be null";
        }
        if ($this->container['sort_order'] === null) {
            $invalid_properties[] = "'sort_order' can't be null";
        }
        if ($this->container['frontend_label'] === null) {
            $invalid_properties[] = "'frontend_label' can't be null";
        }
        if ($this->container['note'] === null) {
            $invalid_properties[] = "'note' can't be null";
        }
        if ($this->container['system'] === null) {
            $invalid_properties[] = "'system' can't be null";
        }
        if ($this->container['backend_type'] === null) {
            $invalid_properties[] = "'backend_type' can't be null";
        }
        if ($this->container['attribute_code'] === null) {
            $invalid_properties[] = "'attribute_code' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['frontend_input'] === null) {
            return false;
        }
        if ($this->container['input_filter'] === null) {
            return false;
        }
        if ($this->container['store_label'] === null) {
            return false;
        }
        if ($this->container['validation_rules'] === null) {
            return false;
        }
        if ($this->container['multiline_count'] === null) {
            return false;
        }
        if ($this->container['visible'] === null) {
            return false;
        }
        if ($this->container['required'] === null) {
            return false;
        }
        if ($this->container['data_model'] === null) {
            return false;
        }
        if ($this->container['options'] === null) {
            return false;
        }
        if ($this->container['frontend_class'] === null) {
            return false;
        }
        if ($this->container['user_defined'] === null) {
            return false;
        }
        if ($this->container['sort_order'] === null) {
            return false;
        }
        if ($this->container['frontend_label'] === null) {
            return false;
        }
        if ($this->container['note'] === null) {
            return false;
        }
        if ($this->container['system'] === null) {
            return false;
        }
        if ($this->container['backend_type'] === null) {
            return false;
        }
        if ($this->container['attribute_code'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets frontend_input
     * @return string
     */
    public function getFrontendInput()
    {
        return $this->container['frontend_input'];
    }

    /**
     * Sets frontend_input
     * @param string $frontend_input HTML for input element.
     * @return $this
     */
    public function setFrontendInput($frontend_input)
    {
        $this->container['frontend_input'] = $frontend_input;

        return $this;
    }

    /**
     * Gets input_filter
     * @return string
     */
    public function getInputFilter()
    {
        return $this->container['input_filter'];
    }

    /**
     * Sets input_filter
     * @param string $input_filter Template used for input (e.g. \"date\")
     * @return $this
     */
    public function setInputFilter($input_filter)
    {
        $this->container['input_filter'] = $input_filter;

        return $this;
    }

    /**
     * Gets store_label
     * @return string
     */
    public function getStoreLabel()
    {
        return $this->container['store_label'];
    }

    /**
     * Sets store_label
     * @param string $store_label Label of the store.
     * @return $this
     */
    public function setStoreLabel($store_label)
    {
        $this->container['store_label'] = $store_label;

        return $this;
    }

    /**
     * Gets validation_rules
     * @return \Swagger\Magento2Client\Model\CustomerDataValidationRuleInterface[]
     */
    public function getValidationRules()
    {
        return $this->container['validation_rules'];
    }

    /**
     * Sets validation_rules
     * @param \Swagger\Magento2Client\Model\CustomerDataValidationRuleInterface[] $validation_rules Validation rules.
     * @return $this
     */
    public function setValidationRules($validation_rules)
    {
        $this->container['validation_rules'] = $validation_rules;

        return $this;
    }

    /**
     * Gets multiline_count
     * @return int
     */
    public function getMultilineCount()
    {
        return $this->container['multiline_count'];
    }

    /**
     * Sets multiline_count
     * @param int $multiline_count Of lines of the attribute value.
     * @return $this
     */
    public function setMultilineCount($multiline_count)
    {
        $this->container['multiline_count'] = $multiline_count;

        return $this;
    }

    /**
     * Gets visible
     * @return bool
     */
    public function getVisible()
    {
        return $this->container['visible'];
    }

    /**
     * Sets visible
     * @param bool $visible Attribute is visible on frontend.
     * @return $this
     */
    public function setVisible($visible)
    {
        $this->container['visible'] = $visible;

        return $this;
    }

    /**
     * Gets required
     * @return bool
     */
    public function getRequired()
    {
        return $this->container['required'];
    }

    /**
     * Sets required
     * @param bool $required Attribute is required.
     * @return $this
     */
    public function setRequired($required)
    {
        $this->container['required'] = $required;

        return $this;
    }

    /**
     * Gets data_model
     * @return string
     */
    public function getDataModel()
    {
        return $this->container['data_model'];
    }

    /**
     * Sets data_model
     * @param string $data_model Data model for attribute.
     * @return $this
     */
    public function setDataModel($data_model)
    {
        $this->container['data_model'] = $data_model;

        return $this;
    }

    /**
     * Gets options
     * @return \Swagger\Magento2Client\Model\CustomerDataOptionInterface[]
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     * @param \Swagger\Magento2Client\Model\CustomerDataOptionInterface[] $options Options of the attribute (key => value pairs for select)
     * @return $this
     */
    public function setOptions($options)
    {
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets frontend_class
     * @return string
     */
    public function getFrontendClass()
    {
        return $this->container['frontend_class'];
    }

    /**
     * Sets frontend_class
     * @param string $frontend_class Class which is used to display the attribute on frontend.
     * @return $this
     */
    public function setFrontendClass($frontend_class)
    {
        $this->container['frontend_class'] = $frontend_class;

        return $this;
    }

    /**
     * Gets user_defined
     * @return bool
     */
    public function getUserDefined()
    {
        return $this->container['user_defined'];
    }

    /**
     * Sets user_defined
     * @param bool $user_defined Current attribute has been defined by a user.
     * @return $this
     */
    public function setUserDefined($user_defined)
    {
        $this->container['user_defined'] = $user_defined;

        return $this;
    }

    /**
     * Gets sort_order
     * @return int
     */
    public function getSortOrder()
    {
        return $this->container['sort_order'];
    }

    /**
     * Sets sort_order
     * @param int $sort_order Attributes sort order.
     * @return $this
     */
    public function setSortOrder($sort_order)
    {
        $this->container['sort_order'] = $sort_order;

        return $this;
    }

    /**
     * Gets frontend_label
     * @return string
     */
    public function getFrontendLabel()
    {
        return $this->container['frontend_label'];
    }

    /**
     * Sets frontend_label
     * @param string $frontend_label Label which supposed to be displayed on frontend.
     * @return $this
     */
    public function setFrontendLabel($frontend_label)
    {
        $this->container['frontend_label'] = $frontend_label;

        return $this;
    }

    /**
     * Gets note
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     * @param string $note The note attribute for the element.
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets system
     * @return bool
     */
    public function getSystem()
    {
        return $this->container['system'];
    }

    /**
     * Sets system
     * @param bool $system This is a system attribute.
     * @return $this
     */
    public function setSystem($system)
    {
        $this->container['system'] = $system;

        return $this;
    }

    /**
     * Gets backend_type
     * @return string
     */
    public function getBackendType()
    {
        return $this->container['backend_type'];
    }

    /**
     * Sets backend_type
     * @param string $backend_type Backend type.
     * @return $this
     */
    public function setBackendType($backend_type)
    {
        $this->container['backend_type'] = $backend_type;

        return $this;
    }

    /**
     * Gets is_used_in_grid
     * @return bool
     */
    public function getIsUsedInGrid()
    {
        return $this->container['is_used_in_grid'];
    }

    /**
     * Sets is_used_in_grid
     * @param bool $is_used_in_grid It is used in customer grid
     * @return $this
     */
    public function setIsUsedInGrid($is_used_in_grid)
    {
        $this->container['is_used_in_grid'] = $is_used_in_grid;

        return $this;
    }

    /**
     * Gets is_visible_in_grid
     * @return bool
     */
    public function getIsVisibleInGrid()
    {
        return $this->container['is_visible_in_grid'];
    }

    /**
     * Sets is_visible_in_grid
     * @param bool $is_visible_in_grid It is visible in customer grid
     * @return $this
     */
    public function setIsVisibleInGrid($is_visible_in_grid)
    {
        $this->container['is_visible_in_grid'] = $is_visible_in_grid;

        return $this;
    }

    /**
     * Gets is_filterable_in_grid
     * @return bool
     */
    public function getIsFilterableInGrid()
    {
        return $this->container['is_filterable_in_grid'];
    }

    /**
     * Sets is_filterable_in_grid
     * @param bool $is_filterable_in_grid It is filterable in customer grid
     * @return $this
     */
    public function setIsFilterableInGrid($is_filterable_in_grid)
    {
        $this->container['is_filterable_in_grid'] = $is_filterable_in_grid;

        return $this;
    }

    /**
     * Gets is_searchable_in_grid
     * @return bool
     */
    public function getIsSearchableInGrid()
    {
        return $this->container['is_searchable_in_grid'];
    }

    /**
     * Sets is_searchable_in_grid
     * @param bool $is_searchable_in_grid It is searchable in customer grid
     * @return $this
     */
    public function setIsSearchableInGrid($is_searchable_in_grid)
    {
        $this->container['is_searchable_in_grid'] = $is_searchable_in_grid;

        return $this;
    }

    /**
     * Gets attribute_code
     * @return string
     */
    public function getAttributeCode()
    {
        return $this->container['attribute_code'];
    }

    /**
     * Sets attribute_code
     * @param string $attribute_code Code of the attribute.
     * @return $this
     */
    public function setAttributeCode($attribute_code)
    {
        $this->container['attribute_code'] = $attribute_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Magento2Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Magento2Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


