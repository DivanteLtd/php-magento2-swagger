<?php
/**
 * QuoteDataCartInterface
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Magento2Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Magento Enterprise
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Magento2Client\Model;

use \ArrayAccess;

/**
 * QuoteDataCartInterface Class Doc Comment
 *
 * @category    Class
 * @description Interface CartInterface
 * @package     Swagger\Magento2Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class QuoteDataCartInterface implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'quote-data-cart-interface';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'created_at' => 'string',
        'updated_at' => 'string',
        'converted_at' => 'string',
        'is_active' => 'bool',
        'is_virtual' => 'bool',
        'items' => '\Swagger\Magento2Client\Model\QuoteDataCartItemInterface[]',
        'items_count' => 'int',
        'items_qty' => 'float',
        'customer' => '\Swagger\Magento2Client\Model\CustomerDataCustomerInterface',
        'billing_address' => '\Swagger\Magento2Client\Model\QuoteDataAddressInterface',
        'reserved_order_id' => 'int',
        'orig_order_id' => 'int',
        'currency' => '\Swagger\Magento2Client\Model\QuoteDataCurrencyInterface',
        'customer_is_guest' => 'bool',
        'customer_note' => 'string',
        'customer_note_notify' => 'bool',
        'customer_tax_class_id' => 'int',
        'store_id' => 'int',
        'extension_attributes' => '\Swagger\Magento2Client\Model\QuoteDataCartExtensionInterface'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'created_at' => null,
        'updated_at' => null,
        'converted_at' => null,
        'is_active' => null,
        'is_virtual' => null,
        'items' => null,
        'items_count' => null,
        'items_qty' => null,
        'customer' => null,
        'billing_address' => null,
        'reserved_order_id' => null,
        'orig_order_id' => null,
        'currency' => null,
        'customer_is_guest' => null,
        'customer_note' => null,
        'customer_note_notify' => null,
        'customer_tax_class_id' => null,
        'store_id' => null,
        'extension_attributes' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt',
        'converted_at' => 'convertedAt',
        'is_active' => 'isActive',
        'is_virtual' => 'isVirtual',
        'items' => 'items',
        'items_count' => 'itemsCount',
        'items_qty' => 'itemsQty',
        'customer' => 'customer',
        'billing_address' => 'billingAddress',
        'reserved_order_id' => 'reservedOrderId',
        'orig_order_id' => 'origOrderId',
        'currency' => 'currency',
        'customer_is_guest' => 'customerIsGuest',
        'customer_note' => 'customerNote',
        'customer_note_notify' => 'customerNoteNotify',
        'customer_tax_class_id' => 'customerTaxClassId',
        'store_id' => 'storeId',
        'extension_attributes' => 'extensionAttributes'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'converted_at' => 'setConvertedAt',
        'is_active' => 'setIsActive',
        'is_virtual' => 'setIsVirtual',
        'items' => 'setItems',
        'items_count' => 'setItemsCount',
        'items_qty' => 'setItemsQty',
        'customer' => 'setCustomer',
        'billing_address' => 'setBillingAddress',
        'reserved_order_id' => 'setReservedOrderId',
        'orig_order_id' => 'setOrigOrderId',
        'currency' => 'setCurrency',
        'customer_is_guest' => 'setCustomerIsGuest',
        'customer_note' => 'setCustomerNote',
        'customer_note_notify' => 'setCustomerNoteNotify',
        'customer_tax_class_id' => 'setCustomerTaxClassId',
        'store_id' => 'setStoreId',
        'extension_attributes' => 'setExtensionAttributes'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'converted_at' => 'getConvertedAt',
        'is_active' => 'getIsActive',
        'is_virtual' => 'getIsVirtual',
        'items' => 'getItems',
        'items_count' => 'getItemsCount',
        'items_qty' => 'getItemsQty',
        'customer' => 'getCustomer',
        'billing_address' => 'getBillingAddress',
        'reserved_order_id' => 'getReservedOrderId',
        'orig_order_id' => 'getOrigOrderId',
        'currency' => 'getCurrency',
        'customer_is_guest' => 'getCustomerIsGuest',
        'customer_note' => 'getCustomerNote',
        'customer_note_notify' => 'getCustomerNoteNotify',
        'customer_tax_class_id' => 'getCustomerTaxClassId',
        'store_id' => 'getStoreId',
        'extension_attributes' => 'getExtensionAttributes'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['converted_at'] = isset($data['converted_at']) ? $data['converted_at'] : null;
        $this->container['is_active'] = isset($data['is_active']) ? $data['is_active'] : null;
        $this->container['is_virtual'] = isset($data['is_virtual']) ? $data['is_virtual'] : null;
        $this->container['items'] = isset($data['items']) ? $data['items'] : null;
        $this->container['items_count'] = isset($data['items_count']) ? $data['items_count'] : null;
        $this->container['items_qty'] = isset($data['items_qty']) ? $data['items_qty'] : null;
        $this->container['customer'] = isset($data['customer']) ? $data['customer'] : null;
        $this->container['billing_address'] = isset($data['billing_address']) ? $data['billing_address'] : null;
        $this->container['reserved_order_id'] = isset($data['reserved_order_id']) ? $data['reserved_order_id'] : null;
        $this->container['orig_order_id'] = isset($data['orig_order_id']) ? $data['orig_order_id'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['customer_is_guest'] = isset($data['customer_is_guest']) ? $data['customer_is_guest'] : null;
        $this->container['customer_note'] = isset($data['customer_note']) ? $data['customer_note'] : null;
        $this->container['customer_note_notify'] = isset($data['customer_note_notify']) ? $data['customer_note_notify'] : null;
        $this->container['customer_tax_class_id'] = isset($data['customer_tax_class_id']) ? $data['customer_tax_class_id'] : null;
        $this->container['store_id'] = isset($data['store_id']) ? $data['store_id'] : null;
        $this->container['extension_attributes'] = isset($data['extension_attributes']) ? $data['extension_attributes'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['id'] === null) {
            $invalid_properties[] = "'id' can't be null";
        }
        if ($this->container['customer'] === null) {
            $invalid_properties[] = "'customer' can't be null";
        }
        if ($this->container['store_id'] === null) {
            $invalid_properties[] = "'store_id' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['customer'] === null) {
            return false;
        }
        if ($this->container['store_id'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id Cart/quote ID.
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_at
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     * @param string $created_at Cart creation date and time. Otherwise, null.
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     * @param string $updated_at Cart last update date and time. Otherwise, null.
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets converted_at
     * @return string
     */
    public function getConvertedAt()
    {
        return $this->container['converted_at'];
    }

    /**
     * Sets converted_at
     * @param string $converted_at Cart conversion date and time. Otherwise, null.
     * @return $this
     */
    public function setConvertedAt($converted_at)
    {
        $this->container['converted_at'] = $converted_at;

        return $this;
    }

    /**
     * Gets is_active
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     * @param bool $is_active Active status flag value. Otherwise, null.
     * @return $this
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets is_virtual
     * @return bool
     */
    public function getIsVirtual()
    {
        return $this->container['is_virtual'];
    }

    /**
     * Sets is_virtual
     * @param bool $is_virtual Virtual flag value. Otherwise, null.
     * @return $this
     */
    public function setIsVirtual($is_virtual)
    {
        $this->container['is_virtual'] = $is_virtual;

        return $this;
    }

    /**
     * Gets items
     * @return \Swagger\Magento2Client\Model\QuoteDataCartItemInterface[]
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     * @param \Swagger\Magento2Client\Model\QuoteDataCartItemInterface[] $items Array of items. Otherwise, null.
     * @return $this
     */
    public function setItems($items)
    {
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets items_count
     * @return int
     */
    public function getItemsCount()
    {
        return $this->container['items_count'];
    }

    /**
     * Sets items_count
     * @param int $items_count Number of different items or products in the cart. Otherwise, null.
     * @return $this
     */
    public function setItemsCount($items_count)
    {
        $this->container['items_count'] = $items_count;

        return $this;
    }

    /**
     * Gets items_qty
     * @return float
     */
    public function getItemsQty()
    {
        return $this->container['items_qty'];
    }

    /**
     * Sets items_qty
     * @param float $items_qty Total quantity of all cart items. Otherwise, null.
     * @return $this
     */
    public function setItemsQty($items_qty)
    {
        $this->container['items_qty'] = $items_qty;

        return $this;
    }

    /**
     * Gets customer
     * @return \Swagger\Magento2Client\Model\CustomerDataCustomerInterface
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     * @param \Swagger\Magento2Client\Model\CustomerDataCustomerInterface $customer
     * @return $this
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets billing_address
     * @return \Swagger\Magento2Client\Model\QuoteDataAddressInterface
     */
    public function getBillingAddress()
    {
        return $this->container['billing_address'];
    }

    /**
     * Sets billing_address
     * @param \Swagger\Magento2Client\Model\QuoteDataAddressInterface $billing_address
     * @return $this
     */
    public function setBillingAddress($billing_address)
    {
        $this->container['billing_address'] = $billing_address;

        return $this;
    }

    /**
     * Gets reserved_order_id
     * @return int
     */
    public function getReservedOrderId()
    {
        return $this->container['reserved_order_id'];
    }

    /**
     * Sets reserved_order_id
     * @param int $reserved_order_id Reserved order ID. Otherwise, null.
     * @return $this
     */
    public function setReservedOrderId($reserved_order_id)
    {
        $this->container['reserved_order_id'] = $reserved_order_id;

        return $this;
    }

    /**
     * Gets orig_order_id
     * @return int
     */
    public function getOrigOrderId()
    {
        return $this->container['orig_order_id'];
    }

    /**
     * Sets orig_order_id
     * @param int $orig_order_id Original order ID. Otherwise, null.
     * @return $this
     */
    public function setOrigOrderId($orig_order_id)
    {
        $this->container['orig_order_id'] = $orig_order_id;

        return $this;
    }

    /**
     * Gets currency
     * @return \Swagger\Magento2Client\Model\QuoteDataCurrencyInterface
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     * @param \Swagger\Magento2Client\Model\QuoteDataCurrencyInterface $currency
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets customer_is_guest
     * @return bool
     */
    public function getCustomerIsGuest()
    {
        return $this->container['customer_is_guest'];
    }

    /**
     * Sets customer_is_guest
     * @param bool $customer_is_guest For guest customers, false for logged in customers
     * @return $this
     */
    public function setCustomerIsGuest($customer_is_guest)
    {
        $this->container['customer_is_guest'] = $customer_is_guest;

        return $this;
    }

    /**
     * Gets customer_note
     * @return string
     */
    public function getCustomerNote()
    {
        return $this->container['customer_note'];
    }

    /**
     * Sets customer_note
     * @param string $customer_note Notice text
     * @return $this
     */
    public function setCustomerNote($customer_note)
    {
        $this->container['customer_note'] = $customer_note;

        return $this;
    }

    /**
     * Gets customer_note_notify
     * @return bool
     */
    public function getCustomerNoteNotify()
    {
        return $this->container['customer_note_notify'];
    }

    /**
     * Sets customer_note_notify
     * @param bool $customer_note_notify Customer notification flag
     * @return $this
     */
    public function setCustomerNoteNotify($customer_note_notify)
    {
        $this->container['customer_note_notify'] = $customer_note_notify;

        return $this;
    }

    /**
     * Gets customer_tax_class_id
     * @return int
     */
    public function getCustomerTaxClassId()
    {
        return $this->container['customer_tax_class_id'];
    }

    /**
     * Sets customer_tax_class_id
     * @param int $customer_tax_class_id Customer tax class ID.
     * @return $this
     */
    public function setCustomerTaxClassId($customer_tax_class_id)
    {
        $this->container['customer_tax_class_id'] = $customer_tax_class_id;

        return $this;
    }

    /**
     * Gets store_id
     * @return int
     */
    public function getStoreId()
    {
        return $this->container['store_id'];
    }

    /**
     * Sets store_id
     * @param int $store_id Store identifier
     * @return $this
     */
    public function setStoreId($store_id)
    {
        $this->container['store_id'] = $store_id;

        return $this;
    }

    /**
     * Gets extension_attributes
     * @return \Swagger\Magento2Client\Model\QuoteDataCartExtensionInterface
     */
    public function getExtensionAttributes()
    {
        return $this->container['extension_attributes'];
    }

    /**
     * Sets extension_attributes
     * @param \Swagger\Magento2Client\Model\QuoteDataCartExtensionInterface $extension_attributes
     * @return $this
     */
    public function setExtensionAttributes($extension_attributes)
    {
        $this->container['extension_attributes'] = $extension_attributes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Magento2Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Magento2Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


