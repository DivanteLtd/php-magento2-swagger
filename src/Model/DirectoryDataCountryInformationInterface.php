<?php
/**
 * DirectoryDataCountryInformationInterface
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Magento2Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Magento Enterprise
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Magento2Client\Model;

use \ArrayAccess;

/**
 * DirectoryDataCountryInformationInterface Class Doc Comment
 *
 * @category    Class
 * @description Country Information interface.
 * @package     Swagger\Magento2Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class DirectoryDataCountryInformationInterface implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'directory-data-country-information-interface';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'two_letter_abbreviation' => 'string',
        'three_letter_abbreviation' => 'string',
        'full_name_locale' => 'string',
        'full_name_english' => 'string',
        'available_regions' => '\Swagger\Magento2Client\Model\DirectoryDataRegionInformationInterface[]',
        'extension_attributes' => '\Swagger\Magento2Client\Model\DirectoryDataCountryInformationExtensionInterface'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'two_letter_abbreviation' => null,
        'three_letter_abbreviation' => null,
        'full_name_locale' => null,
        'full_name_english' => null,
        'available_regions' => null,
        'extension_attributes' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'two_letter_abbreviation' => 'twoLetterAbbreviation',
        'three_letter_abbreviation' => 'threeLetterAbbreviation',
        'full_name_locale' => 'fullNameLocale',
        'full_name_english' => 'fullNameEnglish',
        'available_regions' => 'availableRegions',
        'extension_attributes' => 'extensionAttributes'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'two_letter_abbreviation' => 'setTwoLetterAbbreviation',
        'three_letter_abbreviation' => 'setThreeLetterAbbreviation',
        'full_name_locale' => 'setFullNameLocale',
        'full_name_english' => 'setFullNameEnglish',
        'available_regions' => 'setAvailableRegions',
        'extension_attributes' => 'setExtensionAttributes'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'two_letter_abbreviation' => 'getTwoLetterAbbreviation',
        'three_letter_abbreviation' => 'getThreeLetterAbbreviation',
        'full_name_locale' => 'getFullNameLocale',
        'full_name_english' => 'getFullNameEnglish',
        'available_regions' => 'getAvailableRegions',
        'extension_attributes' => 'getExtensionAttributes'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['two_letter_abbreviation'] = isset($data['two_letter_abbreviation']) ? $data['two_letter_abbreviation'] : null;
        $this->container['three_letter_abbreviation'] = isset($data['three_letter_abbreviation']) ? $data['three_letter_abbreviation'] : null;
        $this->container['full_name_locale'] = isset($data['full_name_locale']) ? $data['full_name_locale'] : null;
        $this->container['full_name_english'] = isset($data['full_name_english']) ? $data['full_name_english'] : null;
        $this->container['available_regions'] = isset($data['available_regions']) ? $data['available_regions'] : null;
        $this->container['extension_attributes'] = isset($data['extension_attributes']) ? $data['extension_attributes'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['id'] === null) {
            $invalid_properties[] = "'id' can't be null";
        }
        if ($this->container['two_letter_abbreviation'] === null) {
            $invalid_properties[] = "'two_letter_abbreviation' can't be null";
        }
        if ($this->container['three_letter_abbreviation'] === null) {
            $invalid_properties[] = "'three_letter_abbreviation' can't be null";
        }
        if ($this->container['full_name_locale'] === null) {
            $invalid_properties[] = "'full_name_locale' can't be null";
        }
        if ($this->container['full_name_english'] === null) {
            $invalid_properties[] = "'full_name_english' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['two_letter_abbreviation'] === null) {
            return false;
        }
        if ($this->container['three_letter_abbreviation'] === null) {
            return false;
        }
        if ($this->container['full_name_locale'] === null) {
            return false;
        }
        if ($this->container['full_name_english'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id The country id for the store.
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets two_letter_abbreviation
     * @return string
     */
    public function getTwoLetterAbbreviation()
    {
        return $this->container['two_letter_abbreviation'];
    }

    /**
     * Sets two_letter_abbreviation
     * @param string $two_letter_abbreviation The country 2 letter abbreviation for the store.
     * @return $this
     */
    public function setTwoLetterAbbreviation($two_letter_abbreviation)
    {
        $this->container['two_letter_abbreviation'] = $two_letter_abbreviation;

        return $this;
    }

    /**
     * Gets three_letter_abbreviation
     * @return string
     */
    public function getThreeLetterAbbreviation()
    {
        return $this->container['three_letter_abbreviation'];
    }

    /**
     * Sets three_letter_abbreviation
     * @param string $three_letter_abbreviation The country 3 letter abbreviation for the store.
     * @return $this
     */
    public function setThreeLetterAbbreviation($three_letter_abbreviation)
    {
        $this->container['three_letter_abbreviation'] = $three_letter_abbreviation;

        return $this;
    }

    /**
     * Gets full_name_locale
     * @return string
     */
    public function getFullNameLocale()
    {
        return $this->container['full_name_locale'];
    }

    /**
     * Sets full_name_locale
     * @param string $full_name_locale The country full name (in store locale) for the store.
     * @return $this
     */
    public function setFullNameLocale($full_name_locale)
    {
        $this->container['full_name_locale'] = $full_name_locale;

        return $this;
    }

    /**
     * Gets full_name_english
     * @return string
     */
    public function getFullNameEnglish()
    {
        return $this->container['full_name_english'];
    }

    /**
     * Sets full_name_english
     * @param string $full_name_english The country full name (in English) for the store.
     * @return $this
     */
    public function setFullNameEnglish($full_name_english)
    {
        $this->container['full_name_english'] = $full_name_english;

        return $this;
    }

    /**
     * Gets available_regions
     * @return \Swagger\Magento2Client\Model\DirectoryDataRegionInformationInterface[]
     */
    public function getAvailableRegions()
    {
        return $this->container['available_regions'];
    }

    /**
     * Sets available_regions
     * @param \Swagger\Magento2Client\Model\DirectoryDataRegionInformationInterface[] $available_regions The available regions for the store.
     * @return $this
     */
    public function setAvailableRegions($available_regions)
    {
        $this->container['available_regions'] = $available_regions;

        return $this;
    }

    /**
     * Gets extension_attributes
     * @return \Swagger\Magento2Client\Model\DirectoryDataCountryInformationExtensionInterface
     */
    public function getExtensionAttributes()
    {
        return $this->container['extension_attributes'];
    }

    /**
     * Sets extension_attributes
     * @param \Swagger\Magento2Client\Model\DirectoryDataCountryInformationExtensionInterface $extension_attributes
     * @return $this
     */
    public function setExtensionAttributes($extension_attributes)
    {
        $this->container['extension_attributes'] = $extension_attributes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Magento2Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Magento2Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


