<?php
/**
 * CmsDataPageInterface
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Magento2Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Magento Enterprise
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Magento2Client\Model;

use \ArrayAccess;

/**
 * CmsDataPageInterface Class Doc Comment
 *
 * @category    Class
 * @description CMS page interface.
 * @package     Swagger\Magento2Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CmsDataPageInterface implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'cms-data-page-interface';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'identifier' => 'string',
        'title' => 'string',
        'page_layout' => 'string',
        'meta_keywords' => 'string',
        'meta_description' => 'string',
        'content_heading' => 'string',
        'content' => 'string',
        'creation_time' => 'string',
        'update_time' => 'string',
        'sort_order' => 'string',
        'layout_update_xml' => 'string',
        'custom_theme' => 'string',
        'custom_root_template' => 'string',
        'custom_layout_update_xml' => 'string',
        'custom_theme_from' => 'string',
        'custom_theme_to' => 'string',
        'active' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'identifier' => null,
        'title' => null,
        'page_layout' => null,
        'meta_keywords' => null,
        'meta_description' => null,
        'content_heading' => null,
        'content' => null,
        'creation_time' => null,
        'update_time' => null,
        'sort_order' => null,
        'layout_update_xml' => null,
        'custom_theme' => null,
        'custom_root_template' => null,
        'custom_layout_update_xml' => null,
        'custom_theme_from' => null,
        'custom_theme_to' => null,
        'active' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'identifier' => 'identifier',
        'title' => 'title',
        'page_layout' => 'pageLayout',
        'meta_keywords' => 'metaKeywords',
        'meta_description' => 'metaDescription',
        'content_heading' => 'contentHeading',
        'content' => 'content',
        'creation_time' => 'creationTime',
        'update_time' => 'updateTime',
        'sort_order' => 'sortOrder',
        'layout_update_xml' => 'layoutUpdateXml',
        'custom_theme' => 'customTheme',
        'custom_root_template' => 'customRootTemplate',
        'custom_layout_update_xml' => 'customLayoutUpdateXml',
        'custom_theme_from' => 'customThemeFrom',
        'custom_theme_to' => 'customThemeTo',
        'active' => 'active'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'identifier' => 'setIdentifier',
        'title' => 'setTitle',
        'page_layout' => 'setPageLayout',
        'meta_keywords' => 'setMetaKeywords',
        'meta_description' => 'setMetaDescription',
        'content_heading' => 'setContentHeading',
        'content' => 'setContent',
        'creation_time' => 'setCreationTime',
        'update_time' => 'setUpdateTime',
        'sort_order' => 'setSortOrder',
        'layout_update_xml' => 'setLayoutUpdateXml',
        'custom_theme' => 'setCustomTheme',
        'custom_root_template' => 'setCustomRootTemplate',
        'custom_layout_update_xml' => 'setCustomLayoutUpdateXml',
        'custom_theme_from' => 'setCustomThemeFrom',
        'custom_theme_to' => 'setCustomThemeTo',
        'active' => 'setActive'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'identifier' => 'getIdentifier',
        'title' => 'getTitle',
        'page_layout' => 'getPageLayout',
        'meta_keywords' => 'getMetaKeywords',
        'meta_description' => 'getMetaDescription',
        'content_heading' => 'getContentHeading',
        'content' => 'getContent',
        'creation_time' => 'getCreationTime',
        'update_time' => 'getUpdateTime',
        'sort_order' => 'getSortOrder',
        'layout_update_xml' => 'getLayoutUpdateXml',
        'custom_theme' => 'getCustomTheme',
        'custom_root_template' => 'getCustomRootTemplate',
        'custom_layout_update_xml' => 'getCustomLayoutUpdateXml',
        'custom_theme_from' => 'getCustomThemeFrom',
        'custom_theme_to' => 'getCustomThemeTo',
        'active' => 'getActive'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['identifier'] = isset($data['identifier']) ? $data['identifier'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['page_layout'] = isset($data['page_layout']) ? $data['page_layout'] : null;
        $this->container['meta_keywords'] = isset($data['meta_keywords']) ? $data['meta_keywords'] : null;
        $this->container['meta_description'] = isset($data['meta_description']) ? $data['meta_description'] : null;
        $this->container['content_heading'] = isset($data['content_heading']) ? $data['content_heading'] : null;
        $this->container['content'] = isset($data['content']) ? $data['content'] : null;
        $this->container['creation_time'] = isset($data['creation_time']) ? $data['creation_time'] : null;
        $this->container['update_time'] = isset($data['update_time']) ? $data['update_time'] : null;
        $this->container['sort_order'] = isset($data['sort_order']) ? $data['sort_order'] : null;
        $this->container['layout_update_xml'] = isset($data['layout_update_xml']) ? $data['layout_update_xml'] : null;
        $this->container['custom_theme'] = isset($data['custom_theme']) ? $data['custom_theme'] : null;
        $this->container['custom_root_template'] = isset($data['custom_root_template']) ? $data['custom_root_template'] : null;
        $this->container['custom_layout_update_xml'] = isset($data['custom_layout_update_xml']) ? $data['custom_layout_update_xml'] : null;
        $this->container['custom_theme_from'] = isset($data['custom_theme_from']) ? $data['custom_theme_from'] : null;
        $this->container['custom_theme_to'] = isset($data['custom_theme_to']) ? $data['custom_theme_to'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['identifier'] === null) {
            $invalid_properties[] = "'identifier' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['identifier'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id ID
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets identifier
     * @return string
     */
    public function getIdentifier()
    {
        return $this->container['identifier'];
    }

    /**
     * Sets identifier
     * @param string $identifier Identifier
     * @return $this
     */
    public function setIdentifier($identifier)
    {
        $this->container['identifier'] = $identifier;

        return $this;
    }

    /**
     * Gets title
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     * @param string $title Title
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets page_layout
     * @return string
     */
    public function getPageLayout()
    {
        return $this->container['page_layout'];
    }

    /**
     * Sets page_layout
     * @param string $page_layout Page layout
     * @return $this
     */
    public function setPageLayout($page_layout)
    {
        $this->container['page_layout'] = $page_layout;

        return $this;
    }

    /**
     * Gets meta_keywords
     * @return string
     */
    public function getMetaKeywords()
    {
        return $this->container['meta_keywords'];
    }

    /**
     * Sets meta_keywords
     * @param string $meta_keywords Meta keywords
     * @return $this
     */
    public function setMetaKeywords($meta_keywords)
    {
        $this->container['meta_keywords'] = $meta_keywords;

        return $this;
    }

    /**
     * Gets meta_description
     * @return string
     */
    public function getMetaDescription()
    {
        return $this->container['meta_description'];
    }

    /**
     * Sets meta_description
     * @param string $meta_description Meta description
     * @return $this
     */
    public function setMetaDescription($meta_description)
    {
        $this->container['meta_description'] = $meta_description;

        return $this;
    }

    /**
     * Gets content_heading
     * @return string
     */
    public function getContentHeading()
    {
        return $this->container['content_heading'];
    }

    /**
     * Sets content_heading
     * @param string $content_heading Content heading
     * @return $this
     */
    public function setContentHeading($content_heading)
    {
        $this->container['content_heading'] = $content_heading;

        return $this;
    }

    /**
     * Gets content
     * @return string
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     * @param string $content Content
     * @return $this
     */
    public function setContent($content)
    {
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets creation_time
     * @return string
     */
    public function getCreationTime()
    {
        return $this->container['creation_time'];
    }

    /**
     * Sets creation_time
     * @param string $creation_time Creation time
     * @return $this
     */
    public function setCreationTime($creation_time)
    {
        $this->container['creation_time'] = $creation_time;

        return $this;
    }

    /**
     * Gets update_time
     * @return string
     */
    public function getUpdateTime()
    {
        return $this->container['update_time'];
    }

    /**
     * Sets update_time
     * @param string $update_time Update time
     * @return $this
     */
    public function setUpdateTime($update_time)
    {
        $this->container['update_time'] = $update_time;

        return $this;
    }

    /**
     * Gets sort_order
     * @return string
     */
    public function getSortOrder()
    {
        return $this->container['sort_order'];
    }

    /**
     * Sets sort_order
     * @param string $sort_order Sort order
     * @return $this
     */
    public function setSortOrder($sort_order)
    {
        $this->container['sort_order'] = $sort_order;

        return $this;
    }

    /**
     * Gets layout_update_xml
     * @return string
     */
    public function getLayoutUpdateXml()
    {
        return $this->container['layout_update_xml'];
    }

    /**
     * Sets layout_update_xml
     * @param string $layout_update_xml Layout update xml
     * @return $this
     */
    public function setLayoutUpdateXml($layout_update_xml)
    {
        $this->container['layout_update_xml'] = $layout_update_xml;

        return $this;
    }

    /**
     * Gets custom_theme
     * @return string
     */
    public function getCustomTheme()
    {
        return $this->container['custom_theme'];
    }

    /**
     * Sets custom_theme
     * @param string $custom_theme Custom theme
     * @return $this
     */
    public function setCustomTheme($custom_theme)
    {
        $this->container['custom_theme'] = $custom_theme;

        return $this;
    }

    /**
     * Gets custom_root_template
     * @return string
     */
    public function getCustomRootTemplate()
    {
        return $this->container['custom_root_template'];
    }

    /**
     * Sets custom_root_template
     * @param string $custom_root_template Custom root template
     * @return $this
     */
    public function setCustomRootTemplate($custom_root_template)
    {
        $this->container['custom_root_template'] = $custom_root_template;

        return $this;
    }

    /**
     * Gets custom_layout_update_xml
     * @return string
     */
    public function getCustomLayoutUpdateXml()
    {
        return $this->container['custom_layout_update_xml'];
    }

    /**
     * Sets custom_layout_update_xml
     * @param string $custom_layout_update_xml Custom layout update xml
     * @return $this
     */
    public function setCustomLayoutUpdateXml($custom_layout_update_xml)
    {
        $this->container['custom_layout_update_xml'] = $custom_layout_update_xml;

        return $this;
    }

    /**
     * Gets custom_theme_from
     * @return string
     */
    public function getCustomThemeFrom()
    {
        return $this->container['custom_theme_from'];
    }

    /**
     * Sets custom_theme_from
     * @param string $custom_theme_from Custom theme from
     * @return $this
     */
    public function setCustomThemeFrom($custom_theme_from)
    {
        $this->container['custom_theme_from'] = $custom_theme_from;

        return $this;
    }

    /**
     * Gets custom_theme_to
     * @return string
     */
    public function getCustomThemeTo()
    {
        return $this->container['custom_theme_to'];
    }

    /**
     * Sets custom_theme_to
     * @param string $custom_theme_to Custom theme to
     * @return $this
     */
    public function setCustomThemeTo($custom_theme_to)
    {
        $this->container['custom_theme_to'] = $custom_theme_to;

        return $this;
    }

    /**
     * Gets active
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     * @param bool $active Active
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Magento2Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Magento2Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


