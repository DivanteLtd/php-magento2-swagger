<?php
/**
 * TaxDataTaxRuleInterface
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Magento2Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Magento Enterprise
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Magento2Client\Model;

use \ArrayAccess;

/**
 * TaxDataTaxRuleInterface Class Doc Comment
 *
 * @category    Class
 * @description Tax rule interface.
 * @package     Swagger\Magento2Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class TaxDataTaxRuleInterface implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'tax-data-tax-rule-interface';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'code' => 'string',
        'priority' => 'int',
        'position' => 'int',
        'customer_tax_class_ids' => 'int[]',
        'product_tax_class_ids' => 'int[]',
        'tax_rate_ids' => 'int[]',
        'calculate_subtotal' => 'bool',
        'extension_attributes' => '\Swagger\Magento2Client\Model\TaxDataTaxRuleExtensionInterface'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'code' => null,
        'priority' => null,
        'position' => null,
        'customer_tax_class_ids' => null,
        'product_tax_class_ids' => null,
        'tax_rate_ids' => null,
        'calculate_subtotal' => null,
        'extension_attributes' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'code' => 'code',
        'priority' => 'priority',
        'position' => 'position',
        'customer_tax_class_ids' => 'customerTaxClassIds',
        'product_tax_class_ids' => 'productTaxClassIds',
        'tax_rate_ids' => 'taxRateIds',
        'calculate_subtotal' => 'calculateSubtotal',
        'extension_attributes' => 'extensionAttributes'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'code' => 'setCode',
        'priority' => 'setPriority',
        'position' => 'setPosition',
        'customer_tax_class_ids' => 'setCustomerTaxClassIds',
        'product_tax_class_ids' => 'setProductTaxClassIds',
        'tax_rate_ids' => 'setTaxRateIds',
        'calculate_subtotal' => 'setCalculateSubtotal',
        'extension_attributes' => 'setExtensionAttributes'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'code' => 'getCode',
        'priority' => 'getPriority',
        'position' => 'getPosition',
        'customer_tax_class_ids' => 'getCustomerTaxClassIds',
        'product_tax_class_ids' => 'getProductTaxClassIds',
        'tax_rate_ids' => 'getTaxRateIds',
        'calculate_subtotal' => 'getCalculateSubtotal',
        'extension_attributes' => 'getExtensionAttributes'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['position'] = isset($data['position']) ? $data['position'] : null;
        $this->container['customer_tax_class_ids'] = isset($data['customer_tax_class_ids']) ? $data['customer_tax_class_ids'] : null;
        $this->container['product_tax_class_ids'] = isset($data['product_tax_class_ids']) ? $data['product_tax_class_ids'] : null;
        $this->container['tax_rate_ids'] = isset($data['tax_rate_ids']) ? $data['tax_rate_ids'] : null;
        $this->container['calculate_subtotal'] = isset($data['calculate_subtotal']) ? $data['calculate_subtotal'] : null;
        $this->container['extension_attributes'] = isset($data['extension_attributes']) ? $data['extension_attributes'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['code'] === null) {
            $invalid_properties[] = "'code' can't be null";
        }
        if ($this->container['priority'] === null) {
            $invalid_properties[] = "'priority' can't be null";
        }
        if ($this->container['position'] === null) {
            $invalid_properties[] = "'position' can't be null";
        }
        if ($this->container['customer_tax_class_ids'] === null) {
            $invalid_properties[] = "'customer_tax_class_ids' can't be null";
        }
        if ($this->container['product_tax_class_ids'] === null) {
            $invalid_properties[] = "'product_tax_class_ids' can't be null";
        }
        if ($this->container['tax_rate_ids'] === null) {
            $invalid_properties[] = "'tax_rate_ids' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['code'] === null) {
            return false;
        }
        if ($this->container['priority'] === null) {
            return false;
        }
        if ($this->container['position'] === null) {
            return false;
        }
        if ($this->container['customer_tax_class_ids'] === null) {
            return false;
        }
        if ($this->container['product_tax_class_ids'] === null) {
            return false;
        }
        if ($this->container['tax_rate_ids'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id Id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets code
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     * @param string $code Tax rule code
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets priority
     * @return int
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     * @param int $priority Priority
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets position
     * @return int
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     * @param int $position Sort order.
     * @return $this
     */
    public function setPosition($position)
    {
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets customer_tax_class_ids
     * @return int[]
     */
    public function getCustomerTaxClassIds()
    {
        return $this->container['customer_tax_class_ids'];
    }

    /**
     * Sets customer_tax_class_ids
     * @param int[] $customer_tax_class_ids Customer tax class id
     * @return $this
     */
    public function setCustomerTaxClassIds($customer_tax_class_ids)
    {
        $this->container['customer_tax_class_ids'] = $customer_tax_class_ids;

        return $this;
    }

    /**
     * Gets product_tax_class_ids
     * @return int[]
     */
    public function getProductTaxClassIds()
    {
        return $this->container['product_tax_class_ids'];
    }

    /**
     * Sets product_tax_class_ids
     * @param int[] $product_tax_class_ids Product tax class id
     * @return $this
     */
    public function setProductTaxClassIds($product_tax_class_ids)
    {
        $this->container['product_tax_class_ids'] = $product_tax_class_ids;

        return $this;
    }

    /**
     * Gets tax_rate_ids
     * @return int[]
     */
    public function getTaxRateIds()
    {
        return $this->container['tax_rate_ids'];
    }

    /**
     * Sets tax_rate_ids
     * @param int[] $tax_rate_ids Tax rate ids
     * @return $this
     */
    public function setTaxRateIds($tax_rate_ids)
    {
        $this->container['tax_rate_ids'] = $tax_rate_ids;

        return $this;
    }

    /**
     * Gets calculate_subtotal
     * @return bool
     */
    public function getCalculateSubtotal()
    {
        return $this->container['calculate_subtotal'];
    }

    /**
     * Sets calculate_subtotal
     * @param bool $calculate_subtotal Calculate subtotal.
     * @return $this
     */
    public function setCalculateSubtotal($calculate_subtotal)
    {
        $this->container['calculate_subtotal'] = $calculate_subtotal;

        return $this;
    }

    /**
     * Gets extension_attributes
     * @return \Swagger\Magento2Client\Model\TaxDataTaxRuleExtensionInterface
     */
    public function getExtensionAttributes()
    {
        return $this->container['extension_attributes'];
    }

    /**
     * Sets extension_attributes
     * @param \Swagger\Magento2Client\Model\TaxDataTaxRuleExtensionInterface $extension_attributes
     * @return $this
     */
    public function setExtensionAttributes($extension_attributes)
    {
        $this->container['extension_attributes'] = $extension_attributes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Magento2Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Magento2Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


