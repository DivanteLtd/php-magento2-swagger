<?php
/**
 * BundleDataBundleOptionInterface
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Magento2Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Magento Enterprise
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Magento2Client\Model;

use \ArrayAccess;

/**
 * BundleDataBundleOptionInterface Class Doc Comment
 *
 * @category    Class
 * @description Interface BundleOptionInterface
 * @package     Swagger\Magento2Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class BundleDataBundleOptionInterface implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'bundle-data-bundle-option-interface';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'option_id' => 'int',
        'option_qty' => 'int',
        'option_selections' => 'int[]',
        'extension_attributes' => '\Swagger\Magento2Client\Model\BundleDataBundleOptionExtensionInterface'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'option_id' => null,
        'option_qty' => null,
        'option_selections' => null,
        'extension_attributes' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'option_id' => 'optionId',
        'option_qty' => 'optionQty',
        'option_selections' => 'optionSelections',
        'extension_attributes' => 'extensionAttributes'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'option_id' => 'setOptionId',
        'option_qty' => 'setOptionQty',
        'option_selections' => 'setOptionSelections',
        'extension_attributes' => 'setExtensionAttributes'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'option_id' => 'getOptionId',
        'option_qty' => 'getOptionQty',
        'option_selections' => 'getOptionSelections',
        'extension_attributes' => 'getExtensionAttributes'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['option_id'] = isset($data['option_id']) ? $data['option_id'] : null;
        $this->container['option_qty'] = isset($data['option_qty']) ? $data['option_qty'] : null;
        $this->container['option_selections'] = isset($data['option_selections']) ? $data['option_selections'] : null;
        $this->container['extension_attributes'] = isset($data['extension_attributes']) ? $data['extension_attributes'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['option_id'] === null) {
            $invalid_properties[] = "'option_id' can't be null";
        }
        if ($this->container['option_qty'] === null) {
            $invalid_properties[] = "'option_qty' can't be null";
        }
        if ($this->container['option_selections'] === null) {
            $invalid_properties[] = "'option_selections' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['option_id'] === null) {
            return false;
        }
        if ($this->container['option_qty'] === null) {
            return false;
        }
        if ($this->container['option_selections'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets option_id
     * @return int
     */
    public function getOptionId()
    {
        return $this->container['option_id'];
    }

    /**
     * Sets option_id
     * @param int $option_id Bundle option id.
     * @return $this
     */
    public function setOptionId($option_id)
    {
        $this->container['option_id'] = $option_id;

        return $this;
    }

    /**
     * Gets option_qty
     * @return int
     */
    public function getOptionQty()
    {
        return $this->container['option_qty'];
    }

    /**
     * Sets option_qty
     * @param int $option_qty Bundle option quantity.
     * @return $this
     */
    public function setOptionQty($option_qty)
    {
        $this->container['option_qty'] = $option_qty;

        return $this;
    }

    /**
     * Gets option_selections
     * @return int[]
     */
    public function getOptionSelections()
    {
        return $this->container['option_selections'];
    }

    /**
     * Sets option_selections
     * @param int[] $option_selections Bundle option selection ids.
     * @return $this
     */
    public function setOptionSelections($option_selections)
    {
        $this->container['option_selections'] = $option_selections;

        return $this;
    }

    /**
     * Gets extension_attributes
     * @return \Swagger\Magento2Client\Model\BundleDataBundleOptionExtensionInterface
     */
    public function getExtensionAttributes()
    {
        return $this->container['extension_attributes'];
    }

    /**
     * Sets extension_attributes
     * @param \Swagger\Magento2Client\Model\BundleDataBundleOptionExtensionInterface $extension_attributes
     * @return $this
     */
    public function setExtensionAttributes($extension_attributes)
    {
        $this->container['extension_attributes'] = $extension_attributes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Magento2Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Magento2Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


