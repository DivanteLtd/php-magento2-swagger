<?php
/**
 * SalesRuleDataRuleInterface
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Magento2Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Magento Enterprise
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Magento2Client\Model;

use \ArrayAccess;

/**
 * SalesRuleDataRuleInterface Class Doc Comment
 *
 * @category    Class
 * @description Interface RuleInterface
 * @package     Swagger\Magento2Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SalesRuleDataRuleInterface implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'sales-rule-data-rule-interface';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'rule_id' => 'int',
        'name' => 'string',
        'store_labels' => '\Swagger\Magento2Client\Model\SalesRuleDataRuleLabelInterface[]',
        'description' => 'string',
        'website_ids' => 'int[]',
        'customer_group_ids' => 'int[]',
        'from_date' => 'string',
        'to_date' => 'string',
        'uses_per_customer' => 'int',
        'is_active' => 'bool',
        'condition' => '\Swagger\Magento2Client\Model\SalesRuleDataConditionInterface',
        'action_condition' => '\Swagger\Magento2Client\Model\SalesRuleDataConditionInterface',
        'stop_rules_processing' => 'bool',
        'is_advanced' => 'bool',
        'product_ids' => 'int[]',
        'sort_order' => 'int',
        'simple_action' => 'string',
        'discount_amount' => 'float',
        'discount_qty' => 'float',
        'discount_step' => 'int',
        'apply_to_shipping' => 'bool',
        'times_used' => 'int',
        'is_rss' => 'bool',
        'coupon_type' => 'string',
        'use_auto_generation' => 'bool',
        'uses_per_coupon' => 'int',
        'simple_free_shipping' => 'string',
        'extension_attributes' => '\Swagger\Magento2Client\Model\SalesRuleDataRuleExtensionInterface'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'rule_id' => null,
        'name' => null,
        'store_labels' => null,
        'description' => null,
        'website_ids' => null,
        'customer_group_ids' => null,
        'from_date' => null,
        'to_date' => null,
        'uses_per_customer' => null,
        'is_active' => null,
        'condition' => null,
        'action_condition' => null,
        'stop_rules_processing' => null,
        'is_advanced' => null,
        'product_ids' => null,
        'sort_order' => null,
        'simple_action' => null,
        'discount_amount' => null,
        'discount_qty' => null,
        'discount_step' => null,
        'apply_to_shipping' => null,
        'times_used' => null,
        'is_rss' => null,
        'coupon_type' => null,
        'use_auto_generation' => null,
        'uses_per_coupon' => null,
        'simple_free_shipping' => null,
        'extension_attributes' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'rule_id' => 'ruleId',
        'name' => 'name',
        'store_labels' => 'storeLabels',
        'description' => 'description',
        'website_ids' => 'websiteIds',
        'customer_group_ids' => 'customerGroupIds',
        'from_date' => 'fromDate',
        'to_date' => 'toDate',
        'uses_per_customer' => 'usesPerCustomer',
        'is_active' => 'isActive',
        'condition' => 'condition',
        'action_condition' => 'actionCondition',
        'stop_rules_processing' => 'stopRulesProcessing',
        'is_advanced' => 'isAdvanced',
        'product_ids' => 'productIds',
        'sort_order' => 'sortOrder',
        'simple_action' => 'simpleAction',
        'discount_amount' => 'discountAmount',
        'discount_qty' => 'discountQty',
        'discount_step' => 'discountStep',
        'apply_to_shipping' => 'applyToShipping',
        'times_used' => 'timesUsed',
        'is_rss' => 'isRss',
        'coupon_type' => 'couponType',
        'use_auto_generation' => 'useAutoGeneration',
        'uses_per_coupon' => 'usesPerCoupon',
        'simple_free_shipping' => 'simpleFreeShipping',
        'extension_attributes' => 'extensionAttributes'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'rule_id' => 'setRuleId',
        'name' => 'setName',
        'store_labels' => 'setStoreLabels',
        'description' => 'setDescription',
        'website_ids' => 'setWebsiteIds',
        'customer_group_ids' => 'setCustomerGroupIds',
        'from_date' => 'setFromDate',
        'to_date' => 'setToDate',
        'uses_per_customer' => 'setUsesPerCustomer',
        'is_active' => 'setIsActive',
        'condition' => 'setCondition',
        'action_condition' => 'setActionCondition',
        'stop_rules_processing' => 'setStopRulesProcessing',
        'is_advanced' => 'setIsAdvanced',
        'product_ids' => 'setProductIds',
        'sort_order' => 'setSortOrder',
        'simple_action' => 'setSimpleAction',
        'discount_amount' => 'setDiscountAmount',
        'discount_qty' => 'setDiscountQty',
        'discount_step' => 'setDiscountStep',
        'apply_to_shipping' => 'setApplyToShipping',
        'times_used' => 'setTimesUsed',
        'is_rss' => 'setIsRss',
        'coupon_type' => 'setCouponType',
        'use_auto_generation' => 'setUseAutoGeneration',
        'uses_per_coupon' => 'setUsesPerCoupon',
        'simple_free_shipping' => 'setSimpleFreeShipping',
        'extension_attributes' => 'setExtensionAttributes'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'rule_id' => 'getRuleId',
        'name' => 'getName',
        'store_labels' => 'getStoreLabels',
        'description' => 'getDescription',
        'website_ids' => 'getWebsiteIds',
        'customer_group_ids' => 'getCustomerGroupIds',
        'from_date' => 'getFromDate',
        'to_date' => 'getToDate',
        'uses_per_customer' => 'getUsesPerCustomer',
        'is_active' => 'getIsActive',
        'condition' => 'getCondition',
        'action_condition' => 'getActionCondition',
        'stop_rules_processing' => 'getStopRulesProcessing',
        'is_advanced' => 'getIsAdvanced',
        'product_ids' => 'getProductIds',
        'sort_order' => 'getSortOrder',
        'simple_action' => 'getSimpleAction',
        'discount_amount' => 'getDiscountAmount',
        'discount_qty' => 'getDiscountQty',
        'discount_step' => 'getDiscountStep',
        'apply_to_shipping' => 'getApplyToShipping',
        'times_used' => 'getTimesUsed',
        'is_rss' => 'getIsRss',
        'coupon_type' => 'getCouponType',
        'use_auto_generation' => 'getUseAutoGeneration',
        'uses_per_coupon' => 'getUsesPerCoupon',
        'simple_free_shipping' => 'getSimpleFreeShipping',
        'extension_attributes' => 'getExtensionAttributes'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['rule_id'] = isset($data['rule_id']) ? $data['rule_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['store_labels'] = isset($data['store_labels']) ? $data['store_labels'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['website_ids'] = isset($data['website_ids']) ? $data['website_ids'] : null;
        $this->container['customer_group_ids'] = isset($data['customer_group_ids']) ? $data['customer_group_ids'] : null;
        $this->container['from_date'] = isset($data['from_date']) ? $data['from_date'] : null;
        $this->container['to_date'] = isset($data['to_date']) ? $data['to_date'] : null;
        $this->container['uses_per_customer'] = isset($data['uses_per_customer']) ? $data['uses_per_customer'] : null;
        $this->container['is_active'] = isset($data['is_active']) ? $data['is_active'] : null;
        $this->container['condition'] = isset($data['condition']) ? $data['condition'] : null;
        $this->container['action_condition'] = isset($data['action_condition']) ? $data['action_condition'] : null;
        $this->container['stop_rules_processing'] = isset($data['stop_rules_processing']) ? $data['stop_rules_processing'] : null;
        $this->container['is_advanced'] = isset($data['is_advanced']) ? $data['is_advanced'] : null;
        $this->container['product_ids'] = isset($data['product_ids']) ? $data['product_ids'] : null;
        $this->container['sort_order'] = isset($data['sort_order']) ? $data['sort_order'] : null;
        $this->container['simple_action'] = isset($data['simple_action']) ? $data['simple_action'] : null;
        $this->container['discount_amount'] = isset($data['discount_amount']) ? $data['discount_amount'] : null;
        $this->container['discount_qty'] = isset($data['discount_qty']) ? $data['discount_qty'] : null;
        $this->container['discount_step'] = isset($data['discount_step']) ? $data['discount_step'] : null;
        $this->container['apply_to_shipping'] = isset($data['apply_to_shipping']) ? $data['apply_to_shipping'] : null;
        $this->container['times_used'] = isset($data['times_used']) ? $data['times_used'] : null;
        $this->container['is_rss'] = isset($data['is_rss']) ? $data['is_rss'] : null;
        $this->container['coupon_type'] = isset($data['coupon_type']) ? $data['coupon_type'] : null;
        $this->container['use_auto_generation'] = isset($data['use_auto_generation']) ? $data['use_auto_generation'] : null;
        $this->container['uses_per_coupon'] = isset($data['uses_per_coupon']) ? $data['uses_per_coupon'] : null;
        $this->container['simple_free_shipping'] = isset($data['simple_free_shipping']) ? $data['simple_free_shipping'] : null;
        $this->container['extension_attributes'] = isset($data['extension_attributes']) ? $data['extension_attributes'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['website_ids'] === null) {
            $invalid_properties[] = "'website_ids' can't be null";
        }
        if ($this->container['customer_group_ids'] === null) {
            $invalid_properties[] = "'customer_group_ids' can't be null";
        }
        if ($this->container['uses_per_customer'] === null) {
            $invalid_properties[] = "'uses_per_customer' can't be null";
        }
        if ($this->container['is_active'] === null) {
            $invalid_properties[] = "'is_active' can't be null";
        }
        if ($this->container['stop_rules_processing'] === null) {
            $invalid_properties[] = "'stop_rules_processing' can't be null";
        }
        if ($this->container['is_advanced'] === null) {
            $invalid_properties[] = "'is_advanced' can't be null";
        }
        if ($this->container['sort_order'] === null) {
            $invalid_properties[] = "'sort_order' can't be null";
        }
        if ($this->container['discount_amount'] === null) {
            $invalid_properties[] = "'discount_amount' can't be null";
        }
        if ($this->container['discount_step'] === null) {
            $invalid_properties[] = "'discount_step' can't be null";
        }
        if ($this->container['apply_to_shipping'] === null) {
            $invalid_properties[] = "'apply_to_shipping' can't be null";
        }
        if ($this->container['times_used'] === null) {
            $invalid_properties[] = "'times_used' can't be null";
        }
        if ($this->container['is_rss'] === null) {
            $invalid_properties[] = "'is_rss' can't be null";
        }
        if ($this->container['coupon_type'] === null) {
            $invalid_properties[] = "'coupon_type' can't be null";
        }
        if ($this->container['use_auto_generation'] === null) {
            $invalid_properties[] = "'use_auto_generation' can't be null";
        }
        if ($this->container['uses_per_coupon'] === null) {
            $invalid_properties[] = "'uses_per_coupon' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['website_ids'] === null) {
            return false;
        }
        if ($this->container['customer_group_ids'] === null) {
            return false;
        }
        if ($this->container['uses_per_customer'] === null) {
            return false;
        }
        if ($this->container['is_active'] === null) {
            return false;
        }
        if ($this->container['stop_rules_processing'] === null) {
            return false;
        }
        if ($this->container['is_advanced'] === null) {
            return false;
        }
        if ($this->container['sort_order'] === null) {
            return false;
        }
        if ($this->container['discount_amount'] === null) {
            return false;
        }
        if ($this->container['discount_step'] === null) {
            return false;
        }
        if ($this->container['apply_to_shipping'] === null) {
            return false;
        }
        if ($this->container['times_used'] === null) {
            return false;
        }
        if ($this->container['is_rss'] === null) {
            return false;
        }
        if ($this->container['coupon_type'] === null) {
            return false;
        }
        if ($this->container['use_auto_generation'] === null) {
            return false;
        }
        if ($this->container['uses_per_coupon'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets rule_id
     * @return int
     */
    public function getRuleId()
    {
        return $this->container['rule_id'];
    }

    /**
     * Sets rule_id
     * @param int $rule_id Rule id
     * @return $this
     */
    public function setRuleId($rule_id)
    {
        $this->container['rule_id'] = $rule_id;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Rule name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets store_labels
     * @return \Swagger\Magento2Client\Model\SalesRuleDataRuleLabelInterface[]
     */
    public function getStoreLabels()
    {
        return $this->container['store_labels'];
    }

    /**
     * Sets store_labels
     * @param \Swagger\Magento2Client\Model\SalesRuleDataRuleLabelInterface[] $store_labels Display label
     * @return $this
     */
    public function setStoreLabels($store_labels)
    {
        $this->container['store_labels'] = $store_labels;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description Description
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets website_ids
     * @return int[]
     */
    public function getWebsiteIds()
    {
        return $this->container['website_ids'];
    }

    /**
     * Sets website_ids
     * @param int[] $website_ids A list of websites the rule applies to
     * @return $this
     */
    public function setWebsiteIds($website_ids)
    {
        $this->container['website_ids'] = $website_ids;

        return $this;
    }

    /**
     * Gets customer_group_ids
     * @return int[]
     */
    public function getCustomerGroupIds()
    {
        return $this->container['customer_group_ids'];
    }

    /**
     * Sets customer_group_ids
     * @param int[] $customer_group_ids Ids of customer groups that the rule applies to
     * @return $this
     */
    public function setCustomerGroupIds($customer_group_ids)
    {
        $this->container['customer_group_ids'] = $customer_group_ids;

        return $this;
    }

    /**
     * Gets from_date
     * @return string
     */
    public function getFromDate()
    {
        return $this->container['from_date'];
    }

    /**
     * Sets from_date
     * @param string $from_date The start date when the coupon is active
     * @return $this
     */
    public function setFromDate($from_date)
    {
        $this->container['from_date'] = $from_date;

        return $this;
    }

    /**
     * Gets to_date
     * @return string
     */
    public function getToDate()
    {
        return $this->container['to_date'];
    }

    /**
     * Sets to_date
     * @param string $to_date The end date when the coupon is active
     * @return $this
     */
    public function setToDate($to_date)
    {
        $this->container['to_date'] = $to_date;

        return $this;
    }

    /**
     * Gets uses_per_customer
     * @return int
     */
    public function getUsesPerCustomer()
    {
        return $this->container['uses_per_customer'];
    }

    /**
     * Sets uses_per_customer
     * @param int $uses_per_customer Number of uses per customer
     * @return $this
     */
    public function setUsesPerCustomer($uses_per_customer)
    {
        $this->container['uses_per_customer'] = $uses_per_customer;

        return $this;
    }

    /**
     * Gets is_active
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     * @param bool $is_active The coupon is active
     * @return $this
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets condition
     * @return \Swagger\Magento2Client\Model\SalesRuleDataConditionInterface
     */
    public function getCondition()
    {
        return $this->container['condition'];
    }

    /**
     * Sets condition
     * @param \Swagger\Magento2Client\Model\SalesRuleDataConditionInterface $condition
     * @return $this
     */
    public function setCondition($condition)
    {
        $this->container['condition'] = $condition;

        return $this;
    }

    /**
     * Gets action_condition
     * @return \Swagger\Magento2Client\Model\SalesRuleDataConditionInterface
     */
    public function getActionCondition()
    {
        return $this->container['action_condition'];
    }

    /**
     * Sets action_condition
     * @param \Swagger\Magento2Client\Model\SalesRuleDataConditionInterface $action_condition
     * @return $this
     */
    public function setActionCondition($action_condition)
    {
        $this->container['action_condition'] = $action_condition;

        return $this;
    }

    /**
     * Gets stop_rules_processing
     * @return bool
     */
    public function getStopRulesProcessing()
    {
        return $this->container['stop_rules_processing'];
    }

    /**
     * Sets stop_rules_processing
     * @param bool $stop_rules_processing To stop rule processing
     * @return $this
     */
    public function setStopRulesProcessing($stop_rules_processing)
    {
        $this->container['stop_rules_processing'] = $stop_rules_processing;

        return $this;
    }

    /**
     * Gets is_advanced
     * @return bool
     */
    public function getIsAdvanced()
    {
        return $this->container['is_advanced'];
    }

    /**
     * Sets is_advanced
     * @param bool $is_advanced Is this field needed
     * @return $this
     */
    public function setIsAdvanced($is_advanced)
    {
        $this->container['is_advanced'] = $is_advanced;

        return $this;
    }

    /**
     * Gets product_ids
     * @return int[]
     */
    public function getProductIds()
    {
        return $this->container['product_ids'];
    }

    /**
     * Sets product_ids
     * @param int[] $product_ids Product ids
     * @return $this
     */
    public function setProductIds($product_ids)
    {
        $this->container['product_ids'] = $product_ids;

        return $this;
    }

    /**
     * Gets sort_order
     * @return int
     */
    public function getSortOrder()
    {
        return $this->container['sort_order'];
    }

    /**
     * Sets sort_order
     * @param int $sort_order Sort order
     * @return $this
     */
    public function setSortOrder($sort_order)
    {
        $this->container['sort_order'] = $sort_order;

        return $this;
    }

    /**
     * Gets simple_action
     * @return string
     */
    public function getSimpleAction()
    {
        return $this->container['simple_action'];
    }

    /**
     * Sets simple_action
     * @param string $simple_action Simple action of the rule
     * @return $this
     */
    public function setSimpleAction($simple_action)
    {
        $this->container['simple_action'] = $simple_action;

        return $this;
    }

    /**
     * Gets discount_amount
     * @return float
     */
    public function getDiscountAmount()
    {
        return $this->container['discount_amount'];
    }

    /**
     * Sets discount_amount
     * @param float $discount_amount Discount amount
     * @return $this
     */
    public function setDiscountAmount($discount_amount)
    {
        $this->container['discount_amount'] = $discount_amount;

        return $this;
    }

    /**
     * Gets discount_qty
     * @return float
     */
    public function getDiscountQty()
    {
        return $this->container['discount_qty'];
    }

    /**
     * Sets discount_qty
     * @param float $discount_qty Maximum qty discount is applied
     * @return $this
     */
    public function setDiscountQty($discount_qty)
    {
        $this->container['discount_qty'] = $discount_qty;

        return $this;
    }

    /**
     * Gets discount_step
     * @return int
     */
    public function getDiscountStep()
    {
        return $this->container['discount_step'];
    }

    /**
     * Sets discount_step
     * @param int $discount_step Discount step
     * @return $this
     */
    public function setDiscountStep($discount_step)
    {
        $this->container['discount_step'] = $discount_step;

        return $this;
    }

    /**
     * Gets apply_to_shipping
     * @return bool
     */
    public function getApplyToShipping()
    {
        return $this->container['apply_to_shipping'];
    }

    /**
     * Sets apply_to_shipping
     * @param bool $apply_to_shipping The rule applies to shipping
     * @return $this
     */
    public function setApplyToShipping($apply_to_shipping)
    {
        $this->container['apply_to_shipping'] = $apply_to_shipping;

        return $this;
    }

    /**
     * Gets times_used
     * @return int
     */
    public function getTimesUsed()
    {
        return $this->container['times_used'];
    }

    /**
     * Sets times_used
     * @param int $times_used How many times the rule has been used
     * @return $this
     */
    public function setTimesUsed($times_used)
    {
        $this->container['times_used'] = $times_used;

        return $this;
    }

    /**
     * Gets is_rss
     * @return bool
     */
    public function getIsRss()
    {
        return $this->container['is_rss'];
    }

    /**
     * Sets is_rss
     * @param bool $is_rss Whether the rule is in RSS
     * @return $this
     */
    public function setIsRss($is_rss)
    {
        $this->container['is_rss'] = $is_rss;

        return $this;
    }

    /**
     * Gets coupon_type
     * @return string
     */
    public function getCouponType()
    {
        return $this->container['coupon_type'];
    }

    /**
     * Sets coupon_type
     * @param string $coupon_type Coupon type
     * @return $this
     */
    public function setCouponType($coupon_type)
    {
        $this->container['coupon_type'] = $coupon_type;

        return $this;
    }

    /**
     * Gets use_auto_generation
     * @return bool
     */
    public function getUseAutoGeneration()
    {
        return $this->container['use_auto_generation'];
    }

    /**
     * Sets use_auto_generation
     * @param bool $use_auto_generation To auto generate coupon
     * @return $this
     */
    public function setUseAutoGeneration($use_auto_generation)
    {
        $this->container['use_auto_generation'] = $use_auto_generation;

        return $this;
    }

    /**
     * Gets uses_per_coupon
     * @return int
     */
    public function getUsesPerCoupon()
    {
        return $this->container['uses_per_coupon'];
    }

    /**
     * Sets uses_per_coupon
     * @param int $uses_per_coupon Limit of uses per coupon
     * @return $this
     */
    public function setUsesPerCoupon($uses_per_coupon)
    {
        $this->container['uses_per_coupon'] = $uses_per_coupon;

        return $this;
    }

    /**
     * Gets simple_free_shipping
     * @return string
     */
    public function getSimpleFreeShipping()
    {
        return $this->container['simple_free_shipping'];
    }

    /**
     * Sets simple_free_shipping
     * @param string $simple_free_shipping To grant free shipping
     * @return $this
     */
    public function setSimpleFreeShipping($simple_free_shipping)
    {
        $this->container['simple_free_shipping'] = $simple_free_shipping;

        return $this;
    }

    /**
     * Gets extension_attributes
     * @return \Swagger\Magento2Client\Model\SalesRuleDataRuleExtensionInterface
     */
    public function getExtensionAttributes()
    {
        return $this->container['extension_attributes'];
    }

    /**
     * Sets extension_attributes
     * @param \Swagger\Magento2Client\Model\SalesRuleDataRuleExtensionInterface $extension_attributes
     * @return $this
     */
    public function setExtensionAttributes($extension_attributes)
    {
        $this->container['extension_attributes'] = $extension_attributes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Magento2Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Magento2Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


